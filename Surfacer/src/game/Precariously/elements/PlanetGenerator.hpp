//
//  PlanetGenerator.hpp
//  Surfacer
//
//  Created by Shamyl Zakariya on 2/1/18.
//

#ifndef PlanetGenerator_hpp
#define PlanetGenerator_hpp


#include "Core.hpp"
#include "TerrainWorld.hpp"

namespace precariously { namespace planet_generation {
    
    /**
     Parameters to tune planet generation
    */
    struct params {
        // size of map
        int size;
        
        // random seed to start with
        int seed;

        // number of perlin noise octaves
        int noiseOctaves;
        
        // scale frequency of perlin noise sampling
        double noiseFrequencyScale;
        
        // Value of zero results in a very wispy planet surface, and 1 results in a very solid surface
        double surfaceSolidity;

        // if true, terrain (not anchors) will be pruned of all but the biggest solid geometry
        bool pruneFloaters;
        
        // world is generated by default 1 to 1 mapping to pixels of the generated maps. Scale and or translate
        // to move the result geoemtry to a more useful position. See params::defaultCenteringTransform
        dmat4 transform;
        
        params(int size=512, int seed=1234):
        size(size),
        seed(seed),
        noiseOctaves(4),
        noiseFrequencyScale(1),
        surfaceSolidity(1),
        pruneFloaters(true)
        {}
        
        /**
         apply a default centering transform that centers the generated geometry at the origin, with an optional scaling factor
         */
        params &defaultCenteringTransform(double scale = 1) {
            this->transform = glm::scale(dvec3(scale, scale, 1)) * glm::translate(dvec3(-size/2, -size/2, 0));
            return *this;
        }
    };
    
    /**
     Generate a terrain map given generation parameters
     */
    ci::Channel8u generate_terrain_map(const params &p);

    /**
     Generate an anchors map given generation parameters
     */
    ci::Channel8u generate_anchors_map(const params &p);

    /**
     Generate terrain and anchors map given generation parameters.
     return pair with .first as terrain map, .second as anchors map
     */
    pair<ci::Channel8u, ci::Channel8u> generate_maps(const params &p);

    /**
     Generate terrain and anchors map from given generation parameters,
     and populate terrain::Shape vector as well as terrain::Anchor vectors
     with the marched/triangulated geometry.
     return pair with .first as terrain map, .second as anchors map
     */
    pair<ci::Channel8u, ci::Channel8u> generate(const params &p, vector <terrain::ShapeRef> &shapes, vector <terrain::AnchorRef> &anchors);

    /**
     Generate just terrain map from given generation parameters,
     and populate terrain::Shape vector with the marched/triangulated geometry.
     return terrain map
     */
    ci::Channel8u generate(const params &p, vector <terrain::ShapeRef> &shapes);

    /**
     Generate a terrin::World with given generation parameters.
     return pair with .first as terrain::World, .second as pair with .first as terrain map, .second as anchor map
     */
    pair<terrain::WorldRef, pair<ci::Channel8u, ci::Channel8u>> generate(const params &p, core::SpaceAccessRef space, terrain::material terrainMaterial, terrain::material anchorMaterial);

    /**
     Generate a terrin::World with given generation parameters.
     return pair with .first as terrain::World, .second as as terrain map
     */
    pair<terrain::WorldRef, ci::Channel8u> generate(const params &p, core::SpaceAccessRef space, terrain::material terrainMaterial);
    
}} // end namespace precariously::planet_generation

#endif /* PlanetGenerator_hpp */

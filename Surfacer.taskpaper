Ideas:
	- Chromatic Abberation filter! Minor red/green separation, getting stronger as distance from center of screen increases. Needs a little blur. Might be expensive, but, fuck! Could be awesome.
Text Rendering:
	So, I'm going to have a webkit renderer running in a separate thread. One webkit context, and a queue of rendering requests which will pass a filename, width & height. You will get something like a "future" from the request immediately. In your renderer, you will ask if the rendering is ready, and when it is, you'll have a ci::Surface to blit. The webkit render thread will service those futures one by one, and idle when done. I'll need some kind of thread-safe consumer queue to look at.
		- use webkit2png as starting point. write a synchronous renderer first as a Cinder app, make it render html/css that's packaged with the app. see if I can provide HTML directly, so I can make messageboxes that use a common css file, but replace their contents with a provided variable. Should this be an URL param and use javascript internally?
		- once that works, learn about threadsafe consumer queues. I don't want the webkit thread running full-bore checking for new work. Will need to re-learn semaphores!
	approach:
		i think the best thing is to load the HTML file, and use DOMNode manipulation to edit content. This avoids need for JS parsing, and should be fast. If I DO want to use JS ( say, have a setText() function in JS) I should optimize by keeping the file open, and re-using it.
		I can thread by using operation queues! No need for a custom thread loop. Just let OSX do what it wants me to do.
Bugs:
	- MagnetoGun's renderer doesn't render in optimized builds. WTF?! @done
		Probably something's being optimized to be non-zero at initialization.
		Let's debug this by making a debug render pass ( right now debug and game are same ).
			- render the same shapes, using lines, no vbos
	
	- Terrain Crasher!
	the dead body's space is NULL. This body was valid, and was removed. Is this a chipmunk bug or one of mine? 
	It was in TERRAIN|TERRAIN collision separate. It's repeatable!
	To REPRODUCE: Roll round boulder into the gap and then shoot ground beneath it.
		- Fix idea:
		Rewrite my collision dispatch system to pass object IDs, not pointers. Use level->getObjectById() to retreive the object, or just skip if the object's gone.

	

	- GaussianBlur bug. 
	Ultimately, the issue is that since the scene is being rendered into a buffer with alpha, things with an alpha channel get their alpha imposed on the detination buffer, knocking out alpha of opaque stuff beneath them. I need to use glBlendFunctionSeparate( RGB_SRC, RGB_DST, GL_ONE, GL_ONE ) to make blending into the buffer work correctly. Once this is done, I can re-enable blending in GaussianBlur's call to _blit(), and hopefully then I can move on to make it work in a mostly transparent buffer.

Todo:
	- Complete rewrite using shared_ptr<> ???!
	- Need some kind of message box which tracks GameObject's screen locations and displays (formatted?) text &/or graphics
		- Various gameplay overlays, like the notification to wiggle the player when grabbed by a Barnacle
	- ViewportFit @done
		Viewport fitting by sensor tracking. I think having discrete ViewportFitSensor objects is a fine idea, sending a predefined message. But I'll need a ViewportFitBehavior to track current player/sensor overlaps to smoothly transition to the best fit.
	- Make restriction regions for monsters. 
		Just a sensor area which the monster won't leave
	- MagnetoGun
		I need to take a different approach to the contact graph towability filter. I'm thinking that it should look something like so: When initiating tow, look to see if the target represents a part of the only path from the player to static ground ( or lava! ). Namely, we need to determine if the target were removed from the contact graph, would there be a path from player to static gorund ( or lava ). If so, don't allow towing.
		This can be done by populating the full player-to-solid-ground contact graph, call that Graph A. Then remove/disable the towable, call that Graph B. If graph A has a path from player to ground and B doesn't we know the object isn't towable.

Future:
	- Shadows
	http://www.catalinzima.com/2010/07/my-technique-for-the-shader-based-dynamic-2d-shadows/
	The idea in the link is great, but it CAN be optimized.
	1) Grab depth buffer, shadow casters should be non-white
	2) Create shadow buffer, 2px by height ( say, 512 )
	3) Merge steps #1 and #2 into a lookup function that performs the distance from light & x-axis linearization (for x & y into red and green ). This function will have the origin of the light square, a region 512x512 offset into the depth buffer. So looking up fragment 0,0 would be offset and then x-axis squished.
	4) for each fragment in the destination 2x wide buffer, walk across X in the depth buffer using the lookup defined in my step 3, using glsl step() function to find the lowest value for that row. This gives me the filled 2px wide shadow buffer from tutorial step 3
	5) Using that, generate the shadow buffer at 512x512
	6) Use additive blit to draw this texture to the screen, with optional coloration.

	This uses slightly more complex math, and requires a loop across X but the loop bounds can be specified at compile time. I suspect step four will overshoot my dependent texture reads. It will likely need to be broken up into X passes at, say, 8 texel reads per.

	I should write a standalone demo using this technique, to see if my MBA can handle it :)

Notes:
Archive:
	- When player is crushed, I should turn off/ramp down antirotation constraint torque @done @project(Todo)
